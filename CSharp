C# 1
-------------------------------------------------------------

C# 1.1
-------------------------------------------------------------

C# 2
-------------------------------------------------------------
2.1 匿名規則
委派可使用匿名規則 但之後可被LAMBDA取代
不過匿名規則提供LAMBDA運算沒有的功能
用執行緒的時候使用委派相關就很好用

Delegate只能使用Dowork(static function) 

Q LAMBDA 跟static FUNCTION差異?

2.2 NULL
T? 是 Nullable<T> 的縮寫
ex: int? test = null; (V)
int test = null; (X)

2.3 迭代器 / yield
foreach 會呼叫迭代器 MoveNext 每次都會在 yield return 先回傳 然後iterator 先暫存在當下 然後再繼續用
sample code : https://docs.microsoft.com/zh-tw/dotnet/csharp/language-reference/keywords/yield

2.4 共變數/ 反變數
‧陣列類型、委派類型和泛型型別引數的隱含參考轉換

Q 奇怪這有點像 向上轉型 向下轉型 等
sample code : https://dotblogs.com.tw/daniel/2018/01/09/151636

C# 3
-------------------------------------------------------------
3.1 物件和集合初始設定式
- 新的匿名類型中的每個物件都有兩個公用屬性
Code: Cat cat = new Cat { Age = 10, Name = "Fluffy" };

Q 是好用，不過要寫INTERFACE

3.2 Lambda 運算式
LAMBDA運算式匿名凾式

Q非同步 LAMBDA ?
QFun / Action
Q區域Fun 跟 LAMBDA 差異：https://docs.microsoft.com/zh-tw/dotnet/csharp/local-functions-vs-lambdas
Qasync / Await : 使用方式
Qin/out差異

LAMBDA 吃的Variable會將外部的copy一份，而不是直接使用。
Q 委派符合記憶體回收的資格 ?
使用參數 ( params / in / out )
params: 方便待參數 可LIST
in:
out:
ref:
ref 需要在執行前初始化參數(給值)而 out 是在程式結束前需要初始化參數(給值)
